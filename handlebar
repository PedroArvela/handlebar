#!/usr/bin/env python3

import argparse
import os
import platform
import shlex
from shutil import rmtree
from subprocess import call, check_output
import sys
import toml

def action_build(path, build, suite, arch, keep_chroot=False):
    if args.verbose >= 1:
        print("Building " + build["name"] + "...")
    
    if build["type"] != "source":
        sys.exit("Nothing to build")

    # Define where is the source and where will be placed the compiled files
    if not "src_dir" in build["source"]:
        src_dir = os.path.normpath(os.path.join(path, "src"))
    else:
        src_dir = os.path.normpath(os.path.join(path, build["source"]["src_dir"]))

    dest_dir = os.path.join(path, "package-" + suite + "-" + arch)
    if not os.path.isdir(dest_dir):
        os.makedirs(dest_dir)
    
    if args.debug:
        print("Build source: " + src_dir)
        print("Build destination: " + dest_dir)
   
    chroot_dir = "/var/cache/handlebar/chroots/" + build["name"] + "-" + suite + "-" + arch
    base_img   = "/var/cache/handlebar/images/" + suite + "-" + arch

    if args.verbose >= 1:
        print("Creating chroot at " + chroot_dir)

    if not os.path.isdir(chroot_dir):
        os.makedirs(chroot_dir)

        # Create aufs mount
        mount_string = chroot_dir + "=rw:" + base_img + "=ro"
        mount_command = shlex.split("mount -t aufs -o dirs=" + mount_string + " none " + chroot_dir)

        if args.debug:
            print("Calling " + " ".join(mount_command))

        result = call(mount_command, cwd=src_dir)
    
        if args.debug:
            print("Call output: " + str(result))

        if result != 0:
            sys.exit("Mount of the filesystem failed")

    # Copy the handlebar file to the chroot
    bind_build_text = toml.dumps(build)

    if not os.path.isdir(chroot_dir + '/var/cache/handlebar/binds/'):
        os.makedirs(chroot_dir + '/var/cache/handlebar/binds/')

    with open(chroot_dir + '/var/cache/handlebar/binds/build.toml', 'w') as bind_file:
        bind_file.write(bind_build_text)

    # Prepare systemd-nspawn with binddir command
    bind_source_dir = "/var/cache/handlebar/binds/source"
    bind_build_dir  = "/var/cache/handlebar/binds/build"
    spawn_string = "systemd-nspawn -D " + chroot_dir + " --bind " + src_dir + ":" + bind_source_dir + " --bind " + dest_dir + ":" + bind_build_dir

    # Install dependencies
    deps_command = shlex.split(spawn_string + " /usr/local/bin/handlebar-helper build-deps /var/cache/handlebar/binds/build.toml")

    if args.verbose >= 1:
        print("Installing dependencies...")

    if args.debug:
        print(" ".join(deps_command))

    result = call(deps_command, cwd=src_dir)

    if result != 0:
        sys.exit("Dependency instalation failed.")

    # Run commands sequentially
    if args.verbose >= 1:
        verbose_arg = "-v"
    else:
        verbose_arg = ""

    if args.debug >= 1:
        debug_arg = "-d"
    else:
        debug_arg = ""

    build_command = shlex.split(spawn_string + " /usr/local/bin/handlebar-helper " + verbose_arg + " " + debug_arg + " build /var/cache/handlebar/binds/build.toml")

    if args.verbose >= 1:
        print("Building...")

    if args.debug:
        print(" ".join(build_command))

    result = call(build_command, cwd=src_dir)

    if result != 0:
        sys.exit("Build failed.")

    if not keep_chroot:
        if args.verbose >= 1:
            print("Cleaning up chroot at " + chroot_dir + "...")
        
        # Unmount aufs
        call(["umount", chroot_dir])

        # Remove temporary folder
        rmtree(chroot_dir)


def action_package(path, build, suite, arch):
    if args.verbose >= 1:
        print("Packaging " + build["name"] + "...")

    if build["type"] == "dir":
        build_folder = os.path.normpath(os.path.join(path, build["directory"]["path"]))
    elif build["type"] == "source":
        build_folder = os.path.join(path, "package-" + suite + "-" + arch)
    else:
        build_folder = None

    if args.debug and build_folder:
        print("Build folder: " + build_folder)

    call_args = [   "fpm", "-t", "deb"]
    
    if build_folder is not None:
        call_args += [ "-s", "dir", "-C", build_folder ]
    else:
        call_args += [ "-s", "empty" ]

    call_args += [  "-n", build["package"]["name"],
                    "-v", build["version"],
                    "-m", build["maintainer"],
                    "-a", arch,
                    "--description", build["package"]["description"], ]
   
    if args.verbose >= 1:
        call_args.append("--verbose")

    if "depends" in build["package"]:
        for depend in build["package"]["depends"]:
            call_args.append("-d")
            call_args.append(depend)

    if "config_files" in build["package"]:
        for conf in build["package"]["config_files"]:
            call_args.append("--config-files")
            call_args.append(conf)

    if "files" in build["package"]:
        call_args.extend(build["package"]["files"])

    if args.debug:
        print(" ".join(call_args))

    call(call_args, cwd=path)

def action_clean(path, build, suite, arch):
    if args.verbose >= 1:
        print("Cleaning up compilation process")

    if build["type"] != "source":
        sys.exit("Nothing to clean")

    chroot_dir = "/var/cache/handlebar/chroots/" + build["name"] + "-" + suite + "-" + arch

    # Define where is the source and where will be placed the compiled files
    if not "src_dir" in build["source"]:
        src_dir = os.path.normpath(os.path.join(path, "src"))
    else:
        src_dir = os.path.normpath(os.path.join(path, build["source"]["src_dir"]))

    dest_dir = os.path.join(path, "package-" + suite + "-" + arch)

    if not os.path.isdir(chroot_dir):
        sys.exit("Nothing to clean")

    # Prepare systemd-nspawn with binddir command
    bind_source_dir = "/var/cache/handlebar/binds/source"
    bind_build_dir  = "/var/cache/handlebar/binds/build"
    spawn_string = "systemd-nspawn -D " + chroot_dir + " --bind " + src_dir + ":" + bind_source_dir + " --bind " + dest_dir + ":" + bind_build_dir

    clean_command = shlex.split(spawn_string + " /usr/local/bin/handlebar-helper clean /var/cache/handlebar/binds/build.toml")

    result = call(clean_command, cwd=path)

    if result != 0:
        sys.exit("Clean failed. Are you sure the architecture and suite are correct?")

    call(["umount", chroot_dir])
    rmtree(chroot_dir)

    

# Parse command line arguments
parser = argparse.ArgumentParser(description="Build Debian packages from source easily")

parser.add_argument("-d", "--debug", action="store_true", help="enable debug mode")
parser.add_argument("-v", "--verbose", action="count", default=0, help="enable verbose output")

parser.add_argument("-s", "--suite", help="define the suite to use (defaults to the running system)")
parser.add_argument("-a", "--arch", help="define the architecture to use (defaults to the running system")

subparser = parser.add_subparsers(title="Sub-commands")

parser_build = subparser.add_parser("build", help="Build the source of a given program")
parser_build.set_defaults(action="build")
parser_build.add_argument("build_file", type=argparse.FileType('r', encoding='UTF-8'), help="The path to the file with the build instructions")
parser_build.add_argument("-k", "--keep-chroot", action="store_true", help="do not delete the filesystem image after compiling, usefull for iterative development")

parser_package = subparser.add_parser("package", help="package a given program")
parser_package.set_defaults(action="package")
parser_package.add_argument("build_file", type=argparse.FileType('r', encoding='utf-8'), help="the path to the file with the build instructions")

parser_package = subparser.add_parser("clean", help="clean the source folder after compilation")
parser_package.set_defaults(action="clean")
parser_package.add_argument("build_file", type=argparse.FileType('r', encoding='utf-8'), help="the path to the file with the build instructions")

args = parser.parse_args()

if args.debug:
    print(args)

# Set up project file, path and settings
if not hasattr(args, 'action'):
    sys.exit("Missing command. Run with -h or --help to know available options")

if args.suite:
    suite = args.suite
else:
    suite = check_output(["lsb_release", "-s", "-c"]).decode(sys.stdout.encoding).rstrip()

if args.arch:
    arch = args.arch
else:
    plat_arch = platform.architecture()
    if plat_arch[0] == "64bit":
        arch = "amd64"
    elif plat_arch[0] == "32bit":
        arch = "i386"
    else:
        arch = plat_arch[0]

if args.verbose >= 1:
    print("Using suite:\t" + suite)
    print("Using architecture:\t" + arch)

build_file = os.path.abspath(args.build_file.name)
build_file_name = os.path.basename(build_file)
build_path = os.path.dirname(build_file)

if args.debug:
    print("Opening " + build_file + "...")

build = toml.loads(args.build_file.read())

if args.debug:
    print(build)

# Choose what to do
if args.action == "build":
    action_build(build_path, build, suite, arch, keep_chroot=args.keep_chroot)
elif args.action == "package":
    action_package(build_path, build, suite, arch)
elif args.action == "clean":
    action_clean(build_path, build, suite, arch)
